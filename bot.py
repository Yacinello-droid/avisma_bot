import telebot
from telebot import types
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import random
from gen import generator
from config import TOKEN
from loader import loader
import time
import yaml

questions = loader.load_questions()

bot = telebot.TeleBot(TOKEN)

current_question_index = -1
score = 0

waiting_for_first_value = False
waiting_for_second_value = False
waiting_for_action = False
is_quiz_active = False  # —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–≤–∏–∑


facts = [
    "–ê–í–ò–°–ú–ê –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ 1937 –≥–æ–¥—É –∫–∞–∫ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–≤–∏–∞—Ü–∏–∏ –∏ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
    "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ ‚Äî –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∞–≤–∏–∞—Ü–∏–∏, –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ø–∞—Å–µ–Ω–∏—è, –∏ –ø–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
    "–í –ê–í–ò–°–ú–ê –æ–±—É—á–∞—é—Ç –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –≤–∫–ª—é—á–∞—è –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –∞–≤–∏–∞—Ü–∏–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ —Ç–µ—Ö–Ω–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.",
    "–°—Ç—É–¥–µ–Ω—Ç—ã –ê–í–ò–°–ú–ê –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞—Ö.",
    "–ò–Ω—Å—Ç–∏—Ç—É—Ç –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
    "–ê–í–ò–°–ú–ê —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —É—á–µ–±–Ω—ã–º–∏ –∏ –Ω–∞—É—á–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–≤–∏–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞.",
    "–°—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.",
    "–í —Ä–∞–º–∫–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±—É–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –ê–í–ò–°–ú–ê –æ–±—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è–º –ø—Ä–∏ –ø–æ–∂–∞—Ä–Ω—ã—Ö –∞–≤–∞—Ä–∏—è—Ö –Ω–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–∞—Ö, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç—É—à–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤ –≤ –≤–æ–∑–¥—É—Ö–µ.",
    "–°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑—É—á–∞—é—Ç —Ç–µ—Ö–Ω–∏–∫—É –∏ —Ç–∞–∫—Ç–∏–∫—É —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—Ç—É –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª—É–∂–±–∞–º–∏.",
    "–í —á–∏—Å–ª–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ê–í–ò–°–ú–ê ‚Äî –≤–µ–¥—É—â–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ —Å—Ñ–µ—Ä–µ –∞–≤–∏–∞—Ü–∏–∏ –∏ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
    "–ò–Ω—Å—Ç–∏—Ç—É—Ç –∏–º–µ–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã, –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.",
    "–í –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å–ø–∞—Å–µ–Ω–∏—é –Ω–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–∞—Ö, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏—è—Ö –∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–æ –ø–æ–∏—Å–∫—É –∏ —Å–ø–∞—Å–µ–Ω–∏—é –≤ –∫–æ—Å–º–æ—Å–µ.",
    "–í —Ä–∞–º–∫–∞—Ö –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –±–æ—Ä—Ç—É –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤."
]

def faq(file_path='data/data.yml'):
        random_id = random.randint(0, 4)
        with open(file_path, 'r', encoding='utf-8') as file:
            data = yaml.safe_load(file)
        return data['questions'][random_id]

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    global is_quiz_active

    bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ê–í–ò–°–ú–ê!')

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ö—Ç–æ –≤—ã?', '–ü—Ä–∏–∫–æ–ª—å—á–∏–∫–∏', 'FAQ')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

    is_quiz_active = False  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–∫–æ–ª—å—á–∏–∫–∏')
def features(message):
    # –û–±–Ω–æ–≤–∏–º, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–ª–∏ —Ñ–∞–∫—Ç—ã, —Ä–∞–±–æ—Ç–∞–ª–∏
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–§–∞–∫—Ç—ã', '–ö–≤–∏–∑', '–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ö–≤–∏–∑')
def start_quiz(message):
    global current_question_index, score, is_quiz_active
    score = 0
    current_question_index = -1
    is_quiz_active = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞ True
    ask_next_question(message)

def ask_next_question(message):
    global is_quiz_active, score, current_question_index
    if not is_quiz_active:  # –ï—Å–ª–∏ –∫–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if current_question_index < len(questions) - 1:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞
        current_question_index += 1

    if current_question_index < len(questions):
        question = questions[current_question_index]

        if 'answers' not in question:
            print(f"Warning: Missing 'answers' for question {current_question_index + 1}")
            return

        answers = question['answers']

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for answer in answers:
            keyboard.add(answer)

        bot.send_message(
            message.chat.id, 
            f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}: {question['question']}",
            reply_markup=keyboard
        )
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
        bot.send_message(message.chat.id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: {score}/{len(questions)}")
        current_question_index = -1  # –°–±—Ä–æ—Å–∏–º –∏–Ω–¥–µ–∫—Å –Ω–∞ -1
        score = 0  # –°–±—Ä–æ—Å–∏–º —Å—á—ë—Ç
        is_quiz_active = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–≤–∏–∑–∞

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ö—Ç–æ –≤—ã?', '–ü—Ä–∏–∫–æ–ª—å—á–∏–∫–∏', 'FAQ')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: is_quiz_active)
def handle_quiz_answer(message):
    global current_question_index, score, is_quiz_active

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if current_question_index < len(questions):
        question = questions[current_question_index]
        correct_answer = question['correct_answer']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if message.text == correct_answer:
            score += 1
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
        else:
            bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! üòû –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        if current_question_index < len(questions) - 1:
            ask_next_question(message)  # –í–æ–ø—Ä–æ—Å —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–µ—Ç—Å—è –≤ ask_next_question, –∞ –Ω–µ –∑–¥–µ—Å—å
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            bot.send_message(message.chat.id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: {score}/{len(questions)}")
            current_question_index = -1  # –°–±—Ä–æ—Å–∏–º –∏–Ω–¥–µ–∫—Å –Ω–∞ -1
            score = 0  # –°–±—Ä–æ—Å–∏–º —Å—á—ë—Ç
            is_quiz_active = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–≤–∏–∑–∞

            send_welcome()


@bot.message_handler(func=lambda message: message.text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
def start_calculation(message):
    if not is_quiz_active:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        global waiting_for_first_value
        waiting_for_first_value = True
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')

@bot.message_handler(func=lambda message: waiting_for_first_value)
def get_first_value(message):
    global first_value, waiting_for_first_value
    try:
        first_value = float(message.text)
        waiting_for_first_value = False
        global waiting_for_second_value
        waiting_for_second_value = True
        bot.send_message(message.chat.id, f'–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_value}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.')

@bot.message_handler(func=lambda message: waiting_for_second_value)
def get_second_value(message):
    global second_value, waiting_for_second_value
    try:
        second_value = float(message.text)
        waiting_for_second_value = False
        global waiting_for_action
        waiting_for_action = True

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('+', '-', '*', '/')
        bot.send_message(message.chat.id, f'–í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {second_value}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.')

@bot.message_handler(func=lambda message: waiting_for_action)
def get_action(message):
    global action, waiting_for_action
    if message.text in ['+', '-', '*', '/']:
        action = message.text
        waiting_for_action = False
        calculate(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: +, -, * –∏–ª–∏ /.')

def calculate(message):
    global first_value, second_value, action

    if action == '+':
        result = first_value + second_value
    elif action == '-':
        result = first_value - second_value
    elif action == '*':
        result = first_value * second_value
    elif action == '/':
        if second_value != 0:
            result = first_value / second_value
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.')
            return

    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')

    # –ü–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    global waiting_for_first_value, waiting_for_second_value, waiting_for_action
    waiting_for_first_value = False
    waiting_for_second_value = False
    waiting_for_action = False

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', '–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—á–µ—Ç?', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç')
def restart_calculation(message):
    global first_value, second_value, action
    first_value = None
    second_value = None
    action = None

    start_calculation(message)  # –°–Ω–æ–≤–∞ –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

@bot.message_handler(func=lambda message: message.text == '–§–∞–∫—Ç—ã')
def send_fact(message):
    if not is_quiz_active:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        fact = random.choice(facts)
        if random.randint(1, 2) == 1:
            image_data = generator.create_fact_image(fact)
        else:
            image_data = generator.create_fact_image_static(fact)
        bot.send_photo(message.chat.id, image_data)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def back(message):
    send_welcome(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é

# def handle_updates(updates):
#     for update in updates:
#         bot.process_new_updates([update])

# while True:
#     updates = bot.get_updates(offset=-1, limit=5, timeout=60)  # Get the latest updates
#     if updates:
#         handle_updates(updates)
#     time.sleep(1)  # Wait for a second before checking for new updates again

@bot.message_handler(func=lambda message: message.text == 'FAQ')
def faq(message):

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç', '–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
def send_fact(message):
    
    fact = load_random_fact()

    response = f'–í–æ–ø—Ä–æ—Å: {fact['question']}\n\n–û—Ç–≤–µ—Ç: {fact['answer']}'
    bot.send_message(message.chat.id, response)

def load_random_fact():
    random_id = random.randint(0, 4)
    with open('data/data.yml', 'r', encoding='utf-8') as file:
        data = yaml.safe_load(file)
    return data['questions'][random_id]

bot.polling()